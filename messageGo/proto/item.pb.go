// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.1
// source: item.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NFTType int32

const (
	NFTType_NFTTypeUnknown    NFTType = 0
	NFTType_NFTTypeConsumable NFTType = 1
	NFTType_NFTTypeEquipment  NFTType = 2
	NFTType_NFTTypeMaterial   NFTType = 3
	NFTType_NFTTypePlaceable  NFTType = 4
	NFTType_NFTTypeThird      NFTType = 5
	NFTType_NFTTypeWearable   NFTType = 6
)

// Enum value maps for NFTType.
var (
	NFTType_name = map[int32]string{
		0: "NFTTypeUnknown",
		1: "NFTTypeConsumable",
		2: "NFTTypeEquipment",
		3: "NFTTypeMaterial",
		4: "NFTTypePlaceable",
		5: "NFTTypeThird",
		6: "NFTTypeWearable",
	}
	NFTType_value = map[string]int32{
		"NFTTypeUnknown":    0,
		"NFTTypeConsumable": 1,
		"NFTTypeEquipment":  2,
		"NFTTypeMaterial":   3,
		"NFTTypePlaceable":  4,
		"NFTTypeThird":      5,
		"NFTTypeWearable":   6,
	}
)

func (x NFTType) Enum() *NFTType {
	p := new(NFTType)
	*p = x
	return p
}

func (x NFTType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NFTType) Descriptor() protoreflect.EnumDescriptor {
	return file_item_proto_enumTypes[0].Descriptor()
}

func (NFTType) Type() protoreflect.EnumType {
	return &file_item_proto_enumTypes[0]
}

func (x NFTType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NFTType.Descriptor instead.
func (NFTType) EnumDescriptor() ([]byte, []int) {
	return file_item_proto_rawDescGZIP(), []int{0}
}

// NFT品质
type NFTRarity int32

const (
	NFTRarity_NFTRarityUnknown NFTRarity = 0 // 无
	NFTRarity_NFTRarityCommon  NFTRarity = 1 // 普通 common
	NFTRarity_NFTRarityRare    NFTRarity = 2 // 稀有 rare
	NFTRarity_NFTRarityEpic    NFTRarity = 3 // 史诗 epic
	NFTRarity_NFTRarityMythic  NFTRarity = 4 // 神话 mythic
	NFTRarity_NFTRarityUnique  NFTRarity = 5 // 唯一 unique
)

// Enum value maps for NFTRarity.
var (
	NFTRarity_name = map[int32]string{
		0: "NFTRarityUnknown",
		1: "NFTRarityCommon",
		2: "NFTRarityRare",
		3: "NFTRarityEpic",
		4: "NFTRarityMythic",
		5: "NFTRarityUnique",
	}
	NFTRarity_value = map[string]int32{
		"NFTRarityUnknown": 0,
		"NFTRarityCommon":  1,
		"NFTRarityRare":    2,
		"NFTRarityEpic":    3,
		"NFTRarityMythic":  4,
		"NFTRarityUnique":  5,
	}
)

func (x NFTRarity) Enum() *NFTRarity {
	p := new(NFTRarity)
	*p = x
	return p
}

func (x NFTRarity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NFTRarity) Descriptor() protoreflect.EnumDescriptor {
	return file_item_proto_enumTypes[1].Descriptor()
}

func (NFTRarity) Type() protoreflect.EnumType {
	return &file_item_proto_enumTypes[1]
}

func (x NFTRarity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NFTRarity.Descriptor instead.
func (NFTRarity) EnumDescriptor() ([]byte, []int) {
	return file_item_proto_rawDescGZIP(), []int{1}
}

// 消耗品作用类型
type NFTConsumableType int32

const (
	NFTConsumableType_NFTConsumableTypeRestoreHP   NFTConsumableType = 0
	NFTConsumableType_NFTConsumableTypeLearnRecipe NFTConsumableType = 1
	NFTConsumableType_NFTConsumableTypeAddBuff     NFTConsumableType = 2
	NFTConsumableType_NFTConsumableTypeOccupyLand  NFTConsumableType = 3
)

// Enum value maps for NFTConsumableType.
var (
	NFTConsumableType_name = map[int32]string{
		0: "NFTConsumableTypeRestoreHP",
		1: "NFTConsumableTypeLearnRecipe",
		2: "NFTConsumableTypeAddBuff",
		3: "NFTConsumableTypeOccupyLand",
	}
	NFTConsumableType_value = map[string]int32{
		"NFTConsumableTypeRestoreHP":   0,
		"NFTConsumableTypeLearnRecipe": 1,
		"NFTConsumableTypeAddBuff":     2,
		"NFTConsumableTypeOccupyLand":  3,
	}
)

func (x NFTConsumableType) Enum() *NFTConsumableType {
	p := new(NFTConsumableType)
	*p = x
	return p
}

func (x NFTConsumableType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NFTConsumableType) Descriptor() protoreflect.EnumDescriptor {
	return file_item_proto_enumTypes[2].Descriptor()
}

func (NFTConsumableType) Type() protoreflect.EnumType {
	return &file_item_proto_enumTypes[2]
}

func (x NFTConsumableType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NFTConsumableType.Descriptor instead.
func (NFTConsumableType) EnumDescriptor() ([]byte, []int) {
	return file_item_proto_rawDescGZIP(), []int{2}
}

type ItemType int32

const (
	// 游戏道具
	ItemType_ItemTypeGame ItemType = 0
	// 放置类NFT
	ItemType_ItemTypeNFT ItemType = 1
)

// Enum value maps for ItemType.
var (
	ItemType_name = map[int32]string{
		0: "ItemTypeGame",
		1: "ItemTypeNFT",
	}
	ItemType_value = map[string]int32{
		"ItemTypeGame": 0,
		"ItemTypeNFT":  1,
	}
)

func (x ItemType) Enum() *ItemType {
	p := new(ItemType)
	*p = x
	return p
}

func (x ItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_item_proto_enumTypes[3].Descriptor()
}

func (ItemType) Type() protoreflect.EnumType {
	return &file_item_proto_enumTypes[3]
}

func (x ItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ItemType.Descriptor instead.
func (ItemType) EnumDescriptor() ([]byte, []int) {
	return file_item_proto_rawDescGZIP(), []int{3}
}

// 玩家装备位置
type AvatarPosition int32

const (
	// 没有装备位置
	AvatarPosition_AvatarPositionNone AvatarPosition = 0
	// 头盔
	AvatarPosition_AvatarPositionHead AvatarPosition = 1
	// 上衣
	AvatarPosition_AvatarPositionCoat AvatarPosition = 2
	// 裤子
	AvatarPosition_AvatarPositionPant AvatarPosition = 3
	// 鞋子
	AvatarPosition_AvatarPositionShoe AvatarPosition = 4
	// 手
	AvatarPosition_AvatarPositionHand AvatarPosition = 5
	// 饰品
	AvatarPosition_AvatarPositionAccessory AvatarPosition = 6
	// 武器
	AvatarPosition_AvatarPositionWeapon AvatarPosition = 7
	// 时装装备位置相对于装备位置偏移量
	AvatarPosition_AppearancePosOffset AvatarPosition = 10
	// 时装头盔
	AvatarPosition_AvatarPositionAppearanceHead AvatarPosition = 11
	// 时装上衣
	AvatarPosition_AvatarPositionAppearanceCoat AvatarPosition = 12
	// 时装裤子
	AvatarPosition_AvatarPositionAppearancePant AvatarPosition = 13
	// 时装鞋子
	AvatarPosition_AvatarPositionAppearanceShoe AvatarPosition = 14
	// 时装手
	AvatarPosition_AvatarPositionAppearanceHand AvatarPosition = 15
	// 时装武器
	AvatarPosition_AvatarPositionAppearanceWeapon AvatarPosition = 17
)

// Enum value maps for AvatarPosition.
var (
	AvatarPosition_name = map[int32]string{
		0:  "AvatarPositionNone",
		1:  "AvatarPositionHead",
		2:  "AvatarPositionCoat",
		3:  "AvatarPositionPant",
		4:  "AvatarPositionShoe",
		5:  "AvatarPositionHand",
		6:  "AvatarPositionAccessory",
		7:  "AvatarPositionWeapon",
		10: "AppearancePosOffset",
		11: "AvatarPositionAppearanceHead",
		12: "AvatarPositionAppearanceCoat",
		13: "AvatarPositionAppearancePant",
		14: "AvatarPositionAppearanceShoe",
		15: "AvatarPositionAppearanceHand",
		17: "AvatarPositionAppearanceWeapon",
	}
	AvatarPosition_value = map[string]int32{
		"AvatarPositionNone":             0,
		"AvatarPositionHead":             1,
		"AvatarPositionCoat":             2,
		"AvatarPositionPant":             3,
		"AvatarPositionShoe":             4,
		"AvatarPositionHand":             5,
		"AvatarPositionAccessory":        6,
		"AvatarPositionWeapon":           7,
		"AppearancePosOffset":            10,
		"AvatarPositionAppearanceHead":   11,
		"AvatarPositionAppearanceCoat":   12,
		"AvatarPositionAppearancePant":   13,
		"AvatarPositionAppearanceShoe":   14,
		"AvatarPositionAppearanceHand":   15,
		"AvatarPositionAppearanceWeapon": 17,
	}
)

func (x AvatarPosition) Enum() *AvatarPosition {
	p := new(AvatarPosition)
	*p = x
	return p
}

func (x AvatarPosition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AvatarPosition) Descriptor() protoreflect.EnumDescriptor {
	return file_item_proto_enumTypes[4].Descriptor()
}

func (AvatarPosition) Type() protoreflect.EnumType {
	return &file_item_proto_enumTypes[4]
}

func (x AvatarPosition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AvatarPosition.Descriptor instead.
func (AvatarPosition) EnumDescriptor() ([]byte, []int) {
	return file_item_proto_rawDescGZIP(), []int{4}
}

// 消耗品
type NFTConsumableInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quality        string            `protobuf:"bytes,1,opt,name=quality,proto3" json:"quality,omitempty"`
	ConsumableType NFTConsumableType `protobuf:"varint,2,opt,name=consumable_type,json=consumableType,proto3,enum=gameMessageCore.NFTConsumableType" json:"consumable_type,omitempty"`
	Value          int32             `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NFTConsumableInfo) Reset() {
	*x = NFTConsumableInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_item_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTConsumableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTConsumableInfo) ProtoMessage() {}

func (x *NFTConsumableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_item_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTConsumableInfo.ProtoReflect.Descriptor instead.
func (*NFTConsumableInfo) Descriptor() ([]byte, []int) {
	return file_item_proto_rawDescGZIP(), []int{0}
}

func (x *NFTConsumableInfo) GetQuality() string {
	if x != nil {
		return x.Quality
	}
	return ""
}

func (x *NFTConsumableInfo) GetConsumableType() NFTConsumableType {
	if x != nil {
		return x.ConsumableType
	}
	return NFTConsumableType_NFTConsumableTypeRestoreHP
}

func (x *NFTConsumableInfo) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type NftSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillId    int32 `protobuf:"varint,1,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	SkillLevel int32 `protobuf:"varint,2,opt,name=skill_level,json=skillLevel,proto3" json:"skill_level,omitempty"`
}

func (x *NftSkill) Reset() {
	*x = NftSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_item_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NftSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NftSkill) ProtoMessage() {}

func (x *NftSkill) ProtoReflect() protoreflect.Message {
	mi := &file_item_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NftSkill.ProtoReflect.Descriptor instead.
func (*NftSkill) Descriptor() ([]byte, []int) {
	return file_item_proto_rawDescGZIP(), []int{1}
}

func (x *NftSkill) GetSkillId() int32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *NftSkill) GetSkillLevel() int32 {
	if x != nil {
		return x.SkillLevel
	}
	return 0
}

// 第三方NFT道具信息
type NftThirdNftInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// 显示资源URL
	ResUrl string `protobuf:"bytes,2,opt,name=res_url,json=resUrl,proto3" json:"res_url,omitempty"`
	// 描述信息
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	// 放置过期时间
	TimeOutSec int32 `protobuf:"varint,4,opt,name=time_out_sec,json=timeOutSec,proto3" json:"time_out_sec,omitempty"`
	// token (address)
	TokenUrl string `protobuf:"bytes,5,opt,name=token_url,json=tokenUrl,proto3" json:"token_url,omitempty"`
	// token Id
	TokenId string `protobuf:"bytes,6,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
}

func (x *NftThirdNftInfo) Reset() {
	*x = NftThirdNftInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_item_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NftThirdNftInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NftThirdNftInfo) ProtoMessage() {}

func (x *NftThirdNftInfo) ProtoReflect() protoreflect.Message {
	mi := &file_item_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NftThirdNftInfo.ProtoReflect.Descriptor instead.
func (*NftThirdNftInfo) Descriptor() ([]byte, []int) {
	return file_item_proto_rawDescGZIP(), []int{2}
}

func (x *NftThirdNftInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NftThirdNftInfo) GetResUrl() string {
	if x != nil {
		return x.ResUrl
	}
	return ""
}

func (x *NftThirdNftInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *NftThirdNftInfo) GetTimeOutSec() int32 {
	if x != nil {
		return x.TimeOutSec
	}
	return 0
}

func (x *NftThirdNftInfo) GetTokenUrl() string {
	if x != nil {
		return x.TokenUrl
	}
	return ""
}

func (x *NftThirdNftInfo) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

// 装备类NFT道具信息
type NftWearableInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token          string    `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	ObjectCid      int32     `protobuf:"varint,2,opt,name=object_cid,json=objectCid,proto3" json:"object_cid,omitempty"`
	WearableRarity NFTRarity `protobuf:"varint,3,opt,name=wearable_rarity,json=wearableRarity,proto3,enum=gameMessageCore.NFTRarity" json:"wearable_rarity,omitempty"`
}

func (x *NftWearableInfo) Reset() {
	*x = NftWearableInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_item_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NftWearableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NftWearableInfo) ProtoMessage() {}

func (x *NftWearableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_item_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NftWearableInfo.ProtoReflect.Descriptor instead.
func (*NftWearableInfo) Descriptor() ([]byte, []int) {
	return file_item_proto_rawDescGZIP(), []int{3}
}

func (x *NftWearableInfo) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *NftWearableInfo) GetObjectCid() int32 {
	if x != nil {
		return x.ObjectCid
	}
	return 0
}

func (x *NftWearableInfo) GetWearableRarity() NFTRarity {
	if x != nil {
		return x.WearableRarity
	}
	return NFTRarity_NFTRarityUnknown
}

// 装备属性(保存的是增量-实际数据 = 增量 + 配置数据)
type AvatarAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 稀有度 unique,  mythic, epic, rare, common
	Rarity string `protobuf:"bytes,1,opt,name=rarity,proto3" json:"rarity,omitempty"`
	// 耐久度
	Durability int32 `protobuf:"varint,2,opt,name=durability,proto3" json:"durability,omitempty"`
	// 属性数据
	Data []*AttributeData `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *AvatarAttribute) Reset() {
	*x = AvatarAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_item_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarAttribute) ProtoMessage() {}

func (x *AvatarAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_item_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarAttribute.ProtoReflect.Descriptor instead.
func (*AvatarAttribute) Descriptor() ([]byte, []int) {
	return file_item_proto_rawDescGZIP(), []int{4}
}

func (x *AvatarAttribute) GetRarity() string {
	if x != nil {
		return x.Rarity
	}
	return ""
}

func (x *AvatarAttribute) GetDurability() int32 {
	if x != nil {
		return x.Durability
	}
	return 0
}

func (x *AvatarAttribute) GetData() []*AttributeData {
	if x != nil {
		return x.Data
	}
	return nil
}

type NftMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description     string           `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Image           string           `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	BackGroundColor string           `protobuf:"bytes,4,opt,name=backGroundColor,proto3" json:"backGroundColor,omitempty"`
	Attributes      []*AttributeData `protobuf:"bytes,5,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *NftMetadata) Reset() {
	*x = NftMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_item_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NftMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NftMetadata) ProtoMessage() {}

func (x *NftMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_item_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NftMetadata.ProtoReflect.Descriptor instead.
func (*NftMetadata) Descriptor() ([]byte, []int) {
	return file_item_proto_rawDescGZIP(), []int{5}
}

func (x *NftMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NftMetadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NftMetadata) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *NftMetadata) GetBackGroundColor() string {
	if x != nil {
		return x.BackGroundColor
	}
	return ""
}

func (x *NftMetadata) GetAttributes() []*AttributeData {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type NftData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network    string       `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	TokenId    string       `protobuf:"bytes,2,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	IsMelandAi bool         `protobuf:"varint,3,opt,name=isMelandAi,proto3" json:"isMelandAi,omitempty"`
	Metadata   *NftMetadata `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *NftData) Reset() {
	*x = NftData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_item_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NftData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NftData) ProtoMessage() {}

func (x *NftData) ProtoReflect() protoreflect.Message {
	mi := &file_item_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NftData.ProtoReflect.Descriptor instead.
func (*NftData) Descriptor() ([]byte, []int) {
	return file_item_proto_rawDescGZIP(), []int{6}
}

func (x *NftData) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *NftData) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *NftData) GetIsMelandAi() bool {
	if x != nil {
		return x.IsMelandAi
	}
	return false
}

func (x *NftData) GetMetadata() *NftMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 道具
type Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemType  ItemType       `protobuf:"varint,1,opt,name=itemType,proto3,enum=gameMessageCore.ItemType" json:"itemType,omitempty"`
	Id        string         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	ObjectCid int32          `protobuf:"varint,3,opt,name=object_cid,json=objectCid,proto3" json:"object_cid,omitempty"` // 对应的 objectId,
	Num       int32          `protobuf:"varint,4,opt,name=num,proto3" json:"num,omitempty"`
	UserId    int64          `protobuf:"varint,5,opt,name=userId,proto3" json:"userId,omitempty"`
	AvatarPos AvatarPosition `protobuf:"varint,9,opt,name=avatarPos,proto3,enum=gameMessageCore.AvatarPosition" json:"avatarPos,omitempty"`
	// nft资产如果建造在地图中了此时 nft_using = true
	NftUsing bool `protobuf:"varint,10,opt,name=nftUsing,proto3" json:"nftUsing,omitempty"`
	// NFT data
	NftData *NftData `protobuf:"bytes,11,opt,name=nftData,proto3" json:"nftData,omitempty"`
	// nft 过期时间
	NftTimeOutSec int32 `protobuf:"varint,12,opt,name=nftTimeOutSec,proto3" json:"nftTimeOutSec,omitempty"`
}

func (x *Item) Reset() {
	*x = Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_item_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_item_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_item_proto_rawDescGZIP(), []int{7}
}

func (x *Item) GetItemType() ItemType {
	if x != nil {
		return x.ItemType
	}
	return ItemType_ItemTypeGame
}

func (x *Item) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Item) GetObjectCid() int32 {
	if x != nil {
		return x.ObjectCid
	}
	return 0
}

func (x *Item) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *Item) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Item) GetAvatarPos() AvatarPosition {
	if x != nil {
		return x.AvatarPos
	}
	return AvatarPosition_AvatarPositionNone
}

func (x *Item) GetNftUsing() bool {
	if x != nil {
		return x.NftUsing
	}
	return false
}

func (x *Item) GetNftData() *NftData {
	if x != nil {
		return x.NftData
	}
	return nil
}

func (x *Item) GetNftTimeOutSec() int32 {
	if x != nil {
		return x.NftTimeOutSec
	}
	return 0
}

type ItemBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cid     int32 `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`
	Num     int32 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	Quality int32 `protobuf:"varint,3,opt,name=quality,proto3" json:"quality,omitempty"`
}

func (x *ItemBaseInfo) Reset() {
	*x = ItemBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_item_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemBaseInfo) ProtoMessage() {}

func (x *ItemBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_item_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemBaseInfo.ProtoReflect.Descriptor instead.
func (*ItemBaseInfo) Descriptor() ([]byte, []int) {
	return file_item_proto_rawDescGZIP(), []int{8}
}

func (x *ItemBaseInfo) GetCid() int32 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *ItemBaseInfo) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *ItemBaseInfo) GetQuality() int32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

// 玩家装备
type PlayerAvatar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 装备位置
	Position AvatarPosition `protobuf:"varint,1,opt,name=position,proto3,enum=gameMessageCore.AvatarPosition" json:"position,omitempty"`
	// 装备的物品 id
	ObjectId int32 `protobuf:"varint,2,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	// 属性
	Attribute *AvatarAttribute `protobuf:"bytes,3,opt,name=attribute,proto3" json:"attribute,omitempty"`
}

func (x *PlayerAvatar) Reset() {
	*x = PlayerAvatar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_item_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerAvatar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerAvatar) ProtoMessage() {}

func (x *PlayerAvatar) ProtoReflect() protoreflect.Message {
	mi := &file_item_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerAvatar.ProtoReflect.Descriptor instead.
func (*PlayerAvatar) Descriptor() ([]byte, []int) {
	return file_item_proto_rawDescGZIP(), []int{9}
}

func (x *PlayerAvatar) GetPosition() AvatarPosition {
	if x != nil {
		return x.Position
	}
	return AvatarPosition_AvatarPositionNone
}

func (x *PlayerAvatar) GetObjectId() int32 {
	if x != nil {
		return x.ObjectId
	}
	return 0
}

func (x *PlayerAvatar) GetAttribute() *AvatarAttribute {
	if x != nil {
		return x.Attribute
	}
	return nil
}

var File_item_proto protoreflect.FileDescriptor

var file_item_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x67, 0x61,
	0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x1a, 0x13, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x90, 0x01, 0x0a, 0x11, 0x4e, 0x46, 0x54, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x4b, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x46,
	0x54, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x46, 0x0a, 0x08, 0x4e, 0x66, 0x74, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xac, 0x01,
	0x0a, 0x0f, 0x4e, 0x66, 0x74, 0x54, 0x68, 0x69, 0x72, 0x64, 0x4e, 0x66, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x73,
	0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x75,
	0x74, 0x53, 0x65, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x72,
	0x6c, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x8b, 0x01, 0x0a,
	0x0f, 0x4e, 0x66, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x0f, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x46, 0x54, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x77, 0x65, 0x61, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x22, 0x7d, 0x0a, 0x0f, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc3, 0x01, 0x0a, 0x0b, 0x4e, 0x66,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x47, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x62, 0x61, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x3e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22,
	0x97, 0x01, 0x0a, 0x07, 0x4e, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x4d, 0x65, 0x6c, 0x61, 0x6e, 0x64, 0x41, 0x69, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4d, 0x65, 0x6c, 0x61, 0x6e, 0x64, 0x41, 0x69, 0x12,
	0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x66, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcb, 0x02, 0x0a, 0x04, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x35, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x3d, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x6f,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x66, 0x74, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x66, 0x74, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a,
	0x07, 0x6e, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x6e, 0x66, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x66, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x53,
	0x65, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x66, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x4f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x22, 0x4c, 0x0a, 0x0c, 0x49, 0x74, 0x65, 0x6d, 0x42,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xa8, 0x01, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x3b, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x3e, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x2a, 0x9c, 0x01, 0x0a, 0x07, 0x4e, 0x46, 0x54, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e,
	0x4e, 0x46, 0x54, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x4e, 0x46, 0x54, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x46, 0x54, 0x54, 0x79,
	0x70, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x12, 0x13, 0x0a,
	0x0f, 0x4e, 0x46, 0x54, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x46, 0x54, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x46, 0x54, 0x54,
	0x79, 0x70, 0x65, 0x54, 0x68, 0x69, 0x72, 0x64, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x46,
	0x54, 0x54, 0x79, 0x70, 0x65, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x06, 0x2a,
	0x86, 0x01, 0x0a, 0x09, 0x4e, 0x46, 0x54, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a,
	0x10, 0x4e, 0x46, 0x54, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x46, 0x54, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x46, 0x54, 0x52,
	0x61, 0x72, 0x69, 0x74, 0x79, 0x52, 0x61, 0x72, 0x65, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4e,
	0x46, 0x54, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x45, 0x70, 0x69, 0x63, 0x10, 0x03, 0x12, 0x13,
	0x0a, 0x0f, 0x4e, 0x46, 0x54, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x79, 0x74, 0x68, 0x69,
	0x63, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x46, 0x54, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79,
	0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x10, 0x05, 0x2a, 0x94, 0x01, 0x0a, 0x11, 0x4e, 0x46, 0x54,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x1a, 0x4e, 0x46, 0x54, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x48, 0x50, 0x10, 0x00, 0x12, 0x20,
	0x0a, 0x1c, 0x4e, 0x46, 0x54, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x10, 0x01,
	0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x46, 0x54, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x41, 0x64, 0x64, 0x42, 0x75, 0x66, 0x66, 0x10, 0x02, 0x12, 0x1f,
	0x0a, 0x1b, 0x4e, 0x46, 0x54, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x4c, 0x61, 0x6e, 0x64, 0x10, 0x03, 0x2a,
	0x2d, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x49,
	0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x46, 0x54, 0x10, 0x01, 0x2a, 0xbe,
	0x03, 0x0a, 0x0e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x61, 0x74, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x6e, 0x74, 0x10,
	0x03, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x65, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x10,
	0x05, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x79, 0x10, 0x06, 0x12, 0x18,
	0x0a, 0x14, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x65,
	0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x73, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x10,
	0x0a, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x10, 0x0b, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x6f, 0x61, 0x74, 0x10, 0x0c, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x50, 0x61, 0x6e, 0x74, 0x10, 0x0d, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x68, 0x6f, 0x65, 0x10, 0x0e, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x65, 0x61,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x10, 0x0f, 0x12, 0x22, 0x0a, 0x1e, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70,
	0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x10, 0x11, 0x42,
	0x13, 0x5a, 0x11, 0x2e, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x6f, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_item_proto_rawDescOnce sync.Once
	file_item_proto_rawDescData = file_item_proto_rawDesc
)

func file_item_proto_rawDescGZIP() []byte {
	file_item_proto_rawDescOnce.Do(func() {
		file_item_proto_rawDescData = protoimpl.X.CompressGZIP(file_item_proto_rawDescData)
	})
	return file_item_proto_rawDescData
}

var file_item_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_item_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_item_proto_goTypes = []interface{}{
	(NFTType)(0),              // 0: gameMessageCore.NFTType
	(NFTRarity)(0),            // 1: gameMessageCore.NFTRarity
	(NFTConsumableType)(0),    // 2: gameMessageCore.NFTConsumableType
	(ItemType)(0),             // 3: gameMessageCore.ItemType
	(AvatarPosition)(0),       // 4: gameMessageCore.AvatarPosition
	(*NFTConsumableInfo)(nil), // 5: gameMessageCore.NFTConsumableInfo
	(*NftSkill)(nil),          // 6: gameMessageCore.NftSkill
	(*NftThirdNftInfo)(nil),   // 7: gameMessageCore.NftThirdNftInfo
	(*NftWearableInfo)(nil),   // 8: gameMessageCore.NftWearableInfo
	(*AvatarAttribute)(nil),   // 9: gameMessageCore.AvatarAttribute
	(*NftMetadata)(nil),       // 10: gameMessageCore.NftMetadata
	(*NftData)(nil),           // 11: gameMessageCore.NftData
	(*Item)(nil),              // 12: gameMessageCore.Item
	(*ItemBaseInfo)(nil),      // 13: gameMessageCore.ItemBaseInfo
	(*PlayerAvatar)(nil),      // 14: gameMessageCore.PlayerAvatar
	(*AttributeData)(nil),     // 15: gameMessageCore.AttributeData
}
var file_item_proto_depIdxs = []int32{
	2,  // 0: gameMessageCore.NFTConsumableInfo.consumable_type:type_name -> gameMessageCore.NFTConsumableType
	1,  // 1: gameMessageCore.NftWearableInfo.wearable_rarity:type_name -> gameMessageCore.NFTRarity
	15, // 2: gameMessageCore.AvatarAttribute.data:type_name -> gameMessageCore.AttributeData
	15, // 3: gameMessageCore.NftMetadata.attributes:type_name -> gameMessageCore.AttributeData
	10, // 4: gameMessageCore.NftData.metadata:type_name -> gameMessageCore.NftMetadata
	3,  // 5: gameMessageCore.Item.itemType:type_name -> gameMessageCore.ItemType
	4,  // 6: gameMessageCore.Item.avatarPos:type_name -> gameMessageCore.AvatarPosition
	11, // 7: gameMessageCore.Item.nftData:type_name -> gameMessageCore.NftData
	4,  // 8: gameMessageCore.PlayerAvatar.position:type_name -> gameMessageCore.AvatarPosition
	9,  // 9: gameMessageCore.PlayerAvatar.attribute:type_name -> gameMessageCore.AvatarAttribute
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_item_proto_init() }
func file_item_proto_init() {
	if File_item_proto != nil {
		return
	}
	file_entityProfile_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_item_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTConsumableInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_item_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NftSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_item_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NftThirdNftInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_item_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NftWearableInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_item_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_item_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NftMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_item_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NftData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_item_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_item_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_item_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerAvatar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_item_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_item_proto_goTypes,
		DependencyIndexes: file_item_proto_depIdxs,
		EnumInfos:         file_item_proto_enumTypes,
		MessageInfos:      file_item_proto_msgTypes,
	}.Build()
	File_item_proto = out.File
	file_item_proto_rawDesc = nil
	file_item_proto_goTypes = nil
	file_item_proto_depIdxs = nil
}
