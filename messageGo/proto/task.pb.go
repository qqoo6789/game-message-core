// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.1
// source: task.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TaskOptionType int32

const (
	TaskOptionType_UnknownTaskOptionType TaskOptionType = 0
	// 上交若干数量的指定道具(寻物任务)
	TaskOptionType_HandInItem TaskOptionType = 1
	// 使用若干数量的指定道具
	TaskOptionType_UseItem TaskOptionType = 2
	// 获得若干数量的指定道具
	TaskOptionType_GetItem TaskOptionType = 3
	// 杀死若干数量的指定怪物
	TaskOptionType_KillMonster TaskOptionType = 4
	//角色达到某等级
	TaskOptionType_UserLevel TaskOptionType = 5
	//指定插槽达到某等级
	TaskOptionType_TargetSlotLevel TaskOptionType = 6
	//指定数量插槽都达到某等级
	TaskOptionType_SlotLevelCount TaskOptionType = 7
	//指定合成技能达到某等级
	TaskOptionType_CraftSkillLevel TaskOptionType = 8
	//使用指定的配方合成
	TaskOptionType_UseRecipe TaskOptionType = 9
	//累计合成多少次
	TaskOptionType_RecipeUseCount TaskOptionType = 10
	//完成若干指定任务链的任务
	TaskOptionType_TaskCount TaskOptionType = 11
	//完成若干次的指定类型任务链
	TaskOptionType_TaskListTypeCount TaskOptionType = 12
	//到达指定坐标点指定半径范围内的区域
	TaskOptionType_TargetPosition TaskOptionType = 13
)

// Enum value maps for TaskOptionType.
var (
	TaskOptionType_name = map[int32]string{
		0:  "UnknownTaskOptionType",
		1:  "HandInItem",
		2:  "UseItem",
		3:  "GetItem",
		4:  "KillMonster",
		5:  "UserLevel",
		6:  "TargetSlotLevel",
		7:  "SlotLevelCount",
		8:  "CraftSkillLevel",
		9:  "UseRecipe",
		10: "RecipeUseCount",
		11: "TaskCount",
		12: "TaskListTypeCount",
		13: "TargetPosition",
	}
	TaskOptionType_value = map[string]int32{
		"UnknownTaskOptionType": 0,
		"HandInItem":            1,
		"UseItem":               2,
		"GetItem":               3,
		"KillMonster":           4,
		"UserLevel":             5,
		"TargetSlotLevel":       6,
		"SlotLevelCount":        7,
		"CraftSkillLevel":       8,
		"UseRecipe":             9,
		"RecipeUseCount":        10,
		"TaskCount":             11,
		"TaskListTypeCount":     12,
		"TargetPosition":        13,
	}
)

func (x TaskOptionType) Enum() *TaskOptionType {
	p := new(TaskOptionType)
	*p = x
	return p
}

func (x TaskOptionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskOptionType) Descriptor() protoreflect.EnumDescriptor {
	return file_task_proto_enumTypes[0].Descriptor()
}

func (TaskOptionType) Type() protoreflect.EnumType {
	return &file_task_proto_enumTypes[0]
}

func (x TaskOptionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskOptionType.Descriptor instead.
func (TaskOptionType) EnumDescriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{0}
}

type TaskListType int32

const (
	TaskListType_TaskListTypeUnknown TaskListType = 0
	// 每日任务
	TaskListType_Daily TaskListType = 1
	// 悬赏任务
	TaskListType_Rewarded TaskListType = 2
)

// Enum value maps for TaskListType.
var (
	TaskListType_name = map[int32]string{
		0: "TaskListTypeUnknown",
		1: "Daily",
		2: "Rewarded",
	}
	TaskListType_value = map[string]int32{
		"TaskListTypeUnknown": 0,
		"Daily":               1,
		"Rewarded":            2,
	}
)

func (x TaskListType) Enum() *TaskListType {
	p := new(TaskListType)
	*p = x
	return p
}

func (x TaskListType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskListType) Descriptor() protoreflect.EnumDescriptor {
	return file_task_proto_enumTypes[1].Descriptor()
}

func (TaskListType) Type() protoreflect.EnumType {
	return &file_task_proto_enumTypes[1]
}

func (x TaskListType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskListType.Descriptor instead.
func (TaskListType) EnumDescriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{1}
}

type TaskOptionItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemCid int32  `protobuf:"varint,1,opt,name=itemCid,proto3" json:"itemCid,omitempty"`
	Num     int32  `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"` // max 10
	NftId   string `protobuf:"bytes,3,opt,name=nftId,proto3" json:"nftId,omitempty"`
}

func (x *TaskOptionItem) Reset() {
	*x = TaskOptionItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskOptionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskOptionItem) ProtoMessage() {}

func (x *TaskOptionItem) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskOptionItem.ProtoReflect.Descriptor instead.
func (*TaskOptionItem) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{0}
}

func (x *TaskOptionItem) GetItemCid() int32 {
	if x != nil {
		return x.ItemCid
	}
	return 0
}

func (x *TaskOptionItem) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *TaskOptionItem) GetNftId() string {
	if x != nil {
		return x.NftId
	}
	return ""
}

type TaskOptionKillMonster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonCid int32 `protobuf:"varint,1,opt,name=monCid,proto3" json:"monCid,omitempty"`
	Num    int32 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *TaskOptionKillMonster) Reset() {
	*x = TaskOptionKillMonster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskOptionKillMonster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskOptionKillMonster) ProtoMessage() {}

func (x *TaskOptionKillMonster) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskOptionKillMonster.ProtoReflect.Descriptor instead.
func (*TaskOptionKillMonster) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{1}
}

func (x *TaskOptionKillMonster) GetMonCid() int32 {
	if x != nil {
		return x.MonCid
	}
	return 0
}

func (x *TaskOptionKillMonster) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

type TaskOptionTargetSlotLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotPos int32 `protobuf:"varint,1,opt,name=slotPos,proto3" json:"slotPos,omitempty"`
	Level   int32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *TaskOptionTargetSlotLevel) Reset() {
	*x = TaskOptionTargetSlotLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskOptionTargetSlotLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskOptionTargetSlotLevel) ProtoMessage() {}

func (x *TaskOptionTargetSlotLevel) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskOptionTargetSlotLevel.ProtoReflect.Descriptor instead.
func (*TaskOptionTargetSlotLevel) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{2}
}

func (x *TaskOptionTargetSlotLevel) GetSlotPos() int32 {
	if x != nil {
		return x.SlotPos
	}
	return 0
}

func (x *TaskOptionTargetSlotLevel) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type TaskOptionSlotLevelCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotLevel int32 `protobuf:"varint,1,opt,name=slotLevel,proto3" json:"slotLevel,omitempty"`
	SlotCount int32 `protobuf:"varint,2,opt,name=slotCount,proto3" json:"slotCount,omitempty"`
}

func (x *TaskOptionSlotLevelCount) Reset() {
	*x = TaskOptionSlotLevelCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskOptionSlotLevelCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskOptionSlotLevelCount) ProtoMessage() {}

func (x *TaskOptionSlotLevelCount) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskOptionSlotLevelCount.ProtoReflect.Descriptor instead.
func (*TaskOptionSlotLevelCount) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{3}
}

func (x *TaskOptionSlotLevelCount) GetSlotLevel() int32 {
	if x != nil {
		return x.SlotLevel
	}
	return 0
}

func (x *TaskOptionSlotLevelCount) GetSlotCount() int32 {
	if x != nil {
		return x.SlotCount
	}
	return 0
}

type TaskOptionCraftSkillLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillId int32 `protobuf:"varint,1,opt,name=skillId,proto3" json:"skillId,omitempty"`
	Level   int32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *TaskOptionCraftSkillLevel) Reset() {
	*x = TaskOptionCraftSkillLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskOptionCraftSkillLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskOptionCraftSkillLevel) ProtoMessage() {}

func (x *TaskOptionCraftSkillLevel) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskOptionCraftSkillLevel.ProtoReflect.Descriptor instead.
func (*TaskOptionCraftSkillLevel) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{4}
}

func (x *TaskOptionCraftSkillLevel) GetSkillId() int32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *TaskOptionCraftSkillLevel) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type TaskOptionUseRecipe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecipeId int32 `protobuf:"varint,1,opt,name=recipeId,proto3" json:"recipeId,omitempty"`
	Times    int32 `protobuf:"varint,2,opt,name=times,proto3" json:"times,omitempty"`
}

func (x *TaskOptionUseRecipe) Reset() {
	*x = TaskOptionUseRecipe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskOptionUseRecipe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskOptionUseRecipe) ProtoMessage() {}

func (x *TaskOptionUseRecipe) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskOptionUseRecipe.ProtoReflect.Descriptor instead.
func (*TaskOptionUseRecipe) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{5}
}

func (x *TaskOptionUseRecipe) GetRecipeId() int32 {
	if x != nil {
		return x.RecipeId
	}
	return 0
}

func (x *TaskOptionUseRecipe) GetTimes() int32 {
	if x != nil {
		return x.Times
	}
	return 0
}

type TaskOptionFinishTaskCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind  TaskListType `protobuf:"varint,1,opt,name=kind,proto3,enum=gameMessageCore.TaskListType" json:"kind,omitempty"`
	Count int32        `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *TaskOptionFinishTaskCount) Reset() {
	*x = TaskOptionFinishTaskCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskOptionFinishTaskCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskOptionFinishTaskCount) ProtoMessage() {}

func (x *TaskOptionFinishTaskCount) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskOptionFinishTaskCount.ProtoReflect.Descriptor instead.
func (*TaskOptionFinishTaskCount) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{6}
}

func (x *TaskOptionFinishTaskCount) GetKind() TaskListType {
	if x != nil {
		return x.Kind
	}
	return TaskListType_TaskListTypeUnknown
}

func (x *TaskOptionFinishTaskCount) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type TaskOptionFinishTaskListCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind  TaskListType `protobuf:"varint,1,opt,name=kind,proto3,enum=gameMessageCore.TaskListType" json:"kind,omitempty"`
	Count int32        `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *TaskOptionFinishTaskListCount) Reset() {
	*x = TaskOptionFinishTaskListCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskOptionFinishTaskListCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskOptionFinishTaskListCount) ProtoMessage() {}

func (x *TaskOptionFinishTaskListCount) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskOptionFinishTaskListCount.ProtoReflect.Descriptor instead.
func (*TaskOptionFinishTaskListCount) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{7}
}

func (x *TaskOptionFinishTaskListCount) GetKind() TaskListType {
	if x != nil {
		return x.Kind
	}
	return TaskListType_TaskListTypeUnknown
}

func (x *TaskOptionFinishTaskListCount) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type TaskOptionTargetPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X          int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y          int32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	Z          int32 `protobuf:"varint,3,opt,name=z,proto3" json:"z,omitempty"`
	DistOffset int32 `protobuf:"varint,4,opt,name=distOffset,proto3" json:"distOffset,omitempty"`
}

func (x *TaskOptionTargetPosition) Reset() {
	*x = TaskOptionTargetPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskOptionTargetPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskOptionTargetPosition) ProtoMessage() {}

func (x *TaskOptionTargetPosition) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskOptionTargetPosition.ProtoReflect.Descriptor instead.
func (*TaskOptionTargetPosition) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{8}
}

func (x *TaskOptionTargetPosition) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *TaskOptionTargetPosition) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *TaskOptionTargetPosition) GetZ() int32 {
	if x != nil {
		return x.Z
	}
	return 0
}

func (x *TaskOptionTargetPosition) GetDistOffset() int32 {
	if x != nil {
		return x.DistOffset
	}
	return 0
}

type TaskOptionCnf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind TaskOptionType `protobuf:"varint,1,opt,name=kind,proto3,enum=gameMessageCore.TaskOptionType" json:"kind,omitempty"`
	// Types that are assignable to Data:
	//	*TaskOptionCnf_UserLevel
	//	*TaskOptionCnf_HandInItem
	//	*TaskOptionCnf_UseItem
	//	*TaskOptionCnf_GetItem
	//	*TaskOptionCnf_KillMonster
	//	*TaskOptionCnf_TargetSlotLevel
	//	*TaskOptionCnf_SlotLevelCount
	//	*TaskOptionCnf_CraftSkillLevel
	//	*TaskOptionCnf_UseRecipe
	//	*TaskOptionCnf_RecipeUseCount
	//	*TaskOptionCnf_FinishTaskCount
	//	*TaskOptionCnf_FinishTaskListCount
	//	*TaskOptionCnf_TargetPosition
	Data isTaskOptionCnf_Data `protobuf_oneof:"data"`
}

func (x *TaskOptionCnf) Reset() {
	*x = TaskOptionCnf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskOptionCnf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskOptionCnf) ProtoMessage() {}

func (x *TaskOptionCnf) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskOptionCnf.ProtoReflect.Descriptor instead.
func (*TaskOptionCnf) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{9}
}

func (x *TaskOptionCnf) GetKind() TaskOptionType {
	if x != nil {
		return x.Kind
	}
	return TaskOptionType_UnknownTaskOptionType
}

func (m *TaskOptionCnf) GetData() isTaskOptionCnf_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *TaskOptionCnf) GetUserLevel() int32 {
	if x, ok := x.GetData().(*TaskOptionCnf_UserLevel); ok {
		return x.UserLevel
	}
	return 0
}

func (x *TaskOptionCnf) GetHandInItem() *TaskOptionItem {
	if x, ok := x.GetData().(*TaskOptionCnf_HandInItem); ok {
		return x.HandInItem
	}
	return nil
}

func (x *TaskOptionCnf) GetUseItem() *TaskOptionItem {
	if x, ok := x.GetData().(*TaskOptionCnf_UseItem); ok {
		return x.UseItem
	}
	return nil
}

func (x *TaskOptionCnf) GetGetItem() *TaskOptionItem {
	if x, ok := x.GetData().(*TaskOptionCnf_GetItem); ok {
		return x.GetItem
	}
	return nil
}

func (x *TaskOptionCnf) GetKillMonster() *TaskOptionKillMonster {
	if x, ok := x.GetData().(*TaskOptionCnf_KillMonster); ok {
		return x.KillMonster
	}
	return nil
}

func (x *TaskOptionCnf) GetTargetSlotLevel() *TaskOptionTargetSlotLevel {
	if x, ok := x.GetData().(*TaskOptionCnf_TargetSlotLevel); ok {
		return x.TargetSlotLevel
	}
	return nil
}

func (x *TaskOptionCnf) GetSlotLevelCount() *TaskOptionSlotLevelCount {
	if x, ok := x.GetData().(*TaskOptionCnf_SlotLevelCount); ok {
		return x.SlotLevelCount
	}
	return nil
}

func (x *TaskOptionCnf) GetCraftSkillLevel() *TaskOptionCraftSkillLevel {
	if x, ok := x.GetData().(*TaskOptionCnf_CraftSkillLevel); ok {
		return x.CraftSkillLevel
	}
	return nil
}

func (x *TaskOptionCnf) GetUseRecipe() *TaskOptionUseRecipe {
	if x, ok := x.GetData().(*TaskOptionCnf_UseRecipe); ok {
		return x.UseRecipe
	}
	return nil
}

func (x *TaskOptionCnf) GetRecipeUseCount() int32 {
	if x, ok := x.GetData().(*TaskOptionCnf_RecipeUseCount); ok {
		return x.RecipeUseCount
	}
	return 0
}

func (x *TaskOptionCnf) GetFinishTaskCount() *TaskOptionFinishTaskCount {
	if x, ok := x.GetData().(*TaskOptionCnf_FinishTaskCount); ok {
		return x.FinishTaskCount
	}
	return nil
}

func (x *TaskOptionCnf) GetFinishTaskListCount() *TaskOptionFinishTaskListCount {
	if x, ok := x.GetData().(*TaskOptionCnf_FinishTaskListCount); ok {
		return x.FinishTaskListCount
	}
	return nil
}

func (x *TaskOptionCnf) GetTargetPosition() *TaskOptionTargetPosition {
	if x, ok := x.GetData().(*TaskOptionCnf_TargetPosition); ok {
		return x.TargetPosition
	}
	return nil
}

type isTaskOptionCnf_Data interface {
	isTaskOptionCnf_Data()
}

type TaskOptionCnf_UserLevel struct {
	// 角色达到某等级
	UserLevel int32 `protobuf:"varint,11,opt,name=userLevel,proto3,oneof"`
}

type TaskOptionCnf_HandInItem struct {
	// 上交若干数量的指定道具(寻物任务)
	HandInItem *TaskOptionItem `protobuf:"bytes,12,opt,name=handInItem,proto3,oneof"`
}

type TaskOptionCnf_UseItem struct {
	// 使用若干数量的指定道具
	UseItem *TaskOptionItem `protobuf:"bytes,13,opt,name=useItem,proto3,oneof"`
}

type TaskOptionCnf_GetItem struct {
	// 获得若干数量的指定道具
	GetItem *TaskOptionItem `protobuf:"bytes,14,opt,name=getItem,proto3,oneof"`
}

type TaskOptionCnf_KillMonster struct {
	// 杀死若干数量的指定怪物
	KillMonster *TaskOptionKillMonster `protobuf:"bytes,15,opt,name=killMonster,proto3,oneof"`
}

type TaskOptionCnf_TargetSlotLevel struct {
	// 指定插槽达到某等级
	TargetSlotLevel *TaskOptionTargetSlotLevel `protobuf:"bytes,16,opt,name=targetSlotLevel,proto3,oneof"`
}

type TaskOptionCnf_SlotLevelCount struct {
	// 指定数量插槽都达到某等级
	SlotLevelCount *TaskOptionSlotLevelCount `protobuf:"bytes,17,opt,name=slotLevelCount,proto3,oneof"`
}

type TaskOptionCnf_CraftSkillLevel struct {
	// 指定合成技能达到某等级
	CraftSkillLevel *TaskOptionCraftSkillLevel `protobuf:"bytes,18,opt,name=craftSkillLevel,proto3,oneof"`
}

type TaskOptionCnf_UseRecipe struct {
	// 使用指定的配方合成
	UseRecipe *TaskOptionUseRecipe `protobuf:"bytes,19,opt,name=useRecipe,proto3,oneof"`
}

type TaskOptionCnf_RecipeUseCount struct {
	// 累计合成多少次
	RecipeUseCount int32 `protobuf:"varint,20,opt,name=RecipeUseCount,proto3,oneof"`
}

type TaskOptionCnf_FinishTaskCount struct {
	// 完成若干指定任务链的任务
	FinishTaskCount *TaskOptionFinishTaskCount `protobuf:"bytes,21,opt,name=FinishTaskCount,proto3,oneof"`
}

type TaskOptionCnf_FinishTaskListCount struct {
	// 完成若干次的指定类型任务链
	FinishTaskListCount *TaskOptionFinishTaskListCount `protobuf:"bytes,22,opt,name=FinishTaskListCount,proto3,oneof"`
}

type TaskOptionCnf_TargetPosition struct {
	// 到达指定坐标点指定半径范围内的区域
	TargetPosition *TaskOptionTargetPosition `protobuf:"bytes,23,opt,name=TargetPosition,proto3,oneof"`
}

func (*TaskOptionCnf_UserLevel) isTaskOptionCnf_Data() {}

func (*TaskOptionCnf_HandInItem) isTaskOptionCnf_Data() {}

func (*TaskOptionCnf_UseItem) isTaskOptionCnf_Data() {}

func (*TaskOptionCnf_GetItem) isTaskOptionCnf_Data() {}

func (*TaskOptionCnf_KillMonster) isTaskOptionCnf_Data() {}

func (*TaskOptionCnf_TargetSlotLevel) isTaskOptionCnf_Data() {}

func (*TaskOptionCnf_SlotLevelCount) isTaskOptionCnf_Data() {}

func (*TaskOptionCnf_CraftSkillLevel) isTaskOptionCnf_Data() {}

func (*TaskOptionCnf_UseRecipe) isTaskOptionCnf_Data() {}

func (*TaskOptionCnf_RecipeUseCount) isTaskOptionCnf_Data() {}

func (*TaskOptionCnf_FinishTaskCount) isTaskOptionCnf_Data() {}

func (*TaskOptionCnf_FinishTaskListCount) isTaskOptionCnf_Data() {}

func (*TaskOptionCnf_TargetPosition) isTaskOptionCnf_Data() {}

type TaskOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 配置
	OptionCnf *TaskOptionCnf `protobuf:"bytes,1,opt,name=optionCnf,proto3" json:"optionCnf,omitempty"`
	// 进度
	Rate int32 `protobuf:"varint,2,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (x *TaskOption) Reset() {
	*x = TaskOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskOption) ProtoMessage() {}

func (x *TaskOption) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskOption.ProtoReflect.Descriptor instead.
func (*TaskOption) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{10}
}

func (x *TaskOption) GetOptionCnf() *TaskOptionCnf {
	if x != nil {
		return x.OptionCnf
	}
	return nil
}

func (x *TaskOption) GetRate() int32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

// 任务
type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 任务 ID
	TaskId int32 `protobuf:"varint,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	// 专精类型
	TalentKind TalentType `protobuf:"varint,2,opt,name=talentKind,proto3,enum=gameMessageCore.TalentType" json:"talentKind,omitempty"`
	// 任务类型
	TaskKind TaskOptionType `protobuf:"varint,3,opt,name=taskKind,proto3,enum=gameMessageCore.TaskOptionType" json:"taskKind,omitempty"`
	// 任务的接取时间
	CreatedSec int64 `protobuf:"varint,4,opt,name=createdSec,proto3" json:"createdSec,omitempty"`
	// 子项信息
	Options []*TaskOption `protobuf:"bytes,5,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{11}
}

func (x *Task) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *Task) GetTalentKind() TalentType {
	if x != nil {
		return x.TalentKind
	}
	return TalentType_TalentTypeUnknown
}

func (x *Task) GetTaskKind() TaskOptionType {
	if x != nil {
		return x.TaskKind
	}
	return TaskOptionType_UnknownTaskOptionType
}

func (x *Task) GetCreatedSec() int64 {
	if x != nil {
		return x.CreatedSec
	}
	return 0
}

func (x *Task) GetOptions() []*TaskOption {
	if x != nil {
		return x.Options
	}
	return nil
}

// 用户已接任务
type NormalTaskData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinishTasks []int32 `protobuf:"varint,1,rep,packed,name=finishTasks,proto3" json:"finishTasks,omitempty"`
	CurTasks    []*Task `protobuf:"bytes,2,rep,name=curTasks,proto3" json:"curTasks,omitempty"`
}

func (x *NormalTaskData) Reset() {
	*x = NormalTaskData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NormalTaskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NormalTaskData) ProtoMessage() {}

func (x *NormalTaskData) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NormalTaskData.ProtoReflect.Descriptor instead.
func (*NormalTaskData) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{12}
}

func (x *NormalTaskData) GetFinishTasks() []int32 {
	if x != nil {
		return x.FinishTasks
	}
	return nil
}

func (x *NormalTaskData) GetCurTasks() []*Task {
	if x != nil {
		return x.CurTasks
	}
	return nil
}

type TaskList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// task list id
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// task list type
	Kind TaskListType `protobuf:"varint,2,opt,name=kind,proto3,enum=gameMessageCore.TaskListType" json:"kind,omitempty"`
	// 专精类型
	TalentKind TalentType `protobuf:"varint,3,opt,name=talentKind,proto3,enum=gameMessageCore.TalentType" json:"talentKind,omitempty"`
	// 任务链是否可以在接取
	CanReceive bool `protobuf:"varint,4,opt,name=canReceive,proto3" json:"canReceive,omitempty"`
	// 任务链是否正在进行
	Doing bool `protobuf:"varint,5,opt,name=doing,proto3" json:"doing,omitempty"`
	// 进度
	Rate int32 `protobuf:"varint,6,opt,name=rate,proto3" json:"rate,omitempty"`
	// current task
	CurTask *Task `protobuf:"bytes,7,opt,name=cur_task,json=curTask,proto3" json:"cur_task,omitempty"`
	// 任务奖励的领取进度(0, 1, 2)
	ReceiveReward int32 `protobuf:"varint,8,opt,name=receiveReward,proto3" json:"receiveReward,omitempty"`
}

func (x *TaskList) Reset() {
	*x = TaskList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskList) ProtoMessage() {}

func (x *TaskList) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskList.ProtoReflect.Descriptor instead.
func (*TaskList) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{13}
}

func (x *TaskList) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaskList) GetKind() TaskListType {
	if x != nil {
		return x.Kind
	}
	return TaskListType_TaskListTypeUnknown
}

func (x *TaskList) GetTalentKind() TalentType {
	if x != nil {
		return x.TalentKind
	}
	return TalentType_TalentTypeUnknown
}

func (x *TaskList) GetCanReceive() bool {
	if x != nil {
		return x.CanReceive
	}
	return false
}

func (x *TaskList) GetDoing() bool {
	if x != nil {
		return x.Doing
	}
	return false
}

func (x *TaskList) GetRate() int32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *TaskList) GetCurTask() *Task {
	if x != nil {
		return x.CurTask
	}
	return nil
}

func (x *TaskList) GetReceiveReward() int32 {
	if x != nil {
		return x.ReceiveReward
	}
	return 0
}

var File_task_proto protoreflect.FileDescriptor

var file_task_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x67, 0x61,
	0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x1a, 0x0c, 0x74,
	0x61, 0x6c, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x52, 0x0a, 0x0e, 0x54,
	0x61, 0x73, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x69, 0x74, 0x65, 0x6d, 0x43, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x66, 0x74,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x66, 0x74, 0x49, 0x64, 0x22,
	0x41, 0x0a, 0x15, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6c,
	0x6c, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x6e, 0x43,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x6f, 0x6e, 0x43, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e,
	0x75, 0x6d, 0x22, 0x4b, 0x0a, 0x19, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22,
	0x56, 0x0a, 0x18, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f,
	0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x6c, 0x6f, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x73, 0x6c, 0x6f, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6c, 0x6f,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6c,
	0x6f, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4b, 0x0a, 0x19, 0x54, 0x61, 0x73, 0x6b, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x61, 0x66, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x22, 0x47, 0x0a, 0x13, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x73, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x64, 0x0a,
	0x19, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x68, 0x0a, 0x1d, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x64, 0x0a,
	0x18, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x01, 0x7a, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x22, 0xfb, 0x07, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6e, 0x66, 0x12, 0x33, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x41, 0x0a, 0x0a, 0x68, 0x61,
	0x6e, 0x64, 0x49, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x48,
	0x00, 0x52, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3b, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x48,
	0x00, 0x52, 0x07, 0x75, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3b, 0x0a, 0x07, 0x67, 0x65,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x07,
	0x67, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x4a, 0x0a, 0x0b, 0x6b, 0x69, 0x6c, 0x6c, 0x4d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x4d, 0x6f, 0x6e,
	0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x6b, 0x69, 0x6c, 0x6c, 0x4d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x6c, 0x6f,
	0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53,
	0x6c, 0x6f, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x53, 0x0a, 0x0e, 0x73,
	0x6c, 0x6f, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x6c, 0x6f, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0e, 0x73, 0x6c, 0x6f, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x56, 0x0a, 0x0f, 0x63, 0x72, 0x61, 0x66, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x61, 0x66, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x72, 0x61, 0x66, 0x74, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x44, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x48, 0x00, 0x52, 0x09, 0x75, 0x73, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x28,
	0x0a, 0x0e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x55, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x72, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x62, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x13, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x0e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x5e, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3c, 0x0a, 0x09, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6e, 0x66, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6e, 0x66, 0x52, 0x09, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6e, 0x66, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x74,
	0x65, 0x22, 0xef, 0x01, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x4b, 0x69, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x3b, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x72, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x12, 0x35, 0x0a, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x65, 0x0a, 0x0e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x22, 0xac, 0x02, 0x0a, 0x08, 0x54,
	0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x74, 0x61,
	0x6c, 0x65, 0x6e, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x72, 0x65,
	0x2e, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x74, 0x61, 0x6c,
	0x65, 0x6e, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x61, 0x6e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x69, 0x6e, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x6f, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x30, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x07, 0x63, 0x75, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2a, 0x90, 0x02, 0x0a, 0x0e, 0x54, 0x61,
	0x73, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x61, 0x6e, 0x64, 0x49,
	0x6e, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x10,
	0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4b, 0x69, 0x6c, 0x6c, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x10,
	0x05, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x6c, 0x6f, 0x74, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x72,
	0x61, 0x66, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x10, 0x08, 0x12,
	0x0d, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x10, 0x09, 0x12, 0x12,
	0x0a, 0x0e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10,
	0x0b, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0d, 0x2a, 0x40, 0x0a, 0x0c,
	0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13,
	0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x10, 0x02, 0x42, 0x13,
	0x5a, 0x11, 0x2e, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x6f, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_task_proto_rawDescOnce sync.Once
	file_task_proto_rawDescData = file_task_proto_rawDesc
)

func file_task_proto_rawDescGZIP() []byte {
	file_task_proto_rawDescOnce.Do(func() {
		file_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_task_proto_rawDescData)
	})
	return file_task_proto_rawDescData
}

var file_task_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_task_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_task_proto_goTypes = []interface{}{
	(TaskOptionType)(0),                   // 0: gameMessageCore.TaskOptionType
	(TaskListType)(0),                     // 1: gameMessageCore.TaskListType
	(*TaskOptionItem)(nil),                // 2: gameMessageCore.TaskOptionItem
	(*TaskOptionKillMonster)(nil),         // 3: gameMessageCore.TaskOptionKillMonster
	(*TaskOptionTargetSlotLevel)(nil),     // 4: gameMessageCore.TaskOptionTargetSlotLevel
	(*TaskOptionSlotLevelCount)(nil),      // 5: gameMessageCore.TaskOptionSlotLevelCount
	(*TaskOptionCraftSkillLevel)(nil),     // 6: gameMessageCore.TaskOptionCraftSkillLevel
	(*TaskOptionUseRecipe)(nil),           // 7: gameMessageCore.TaskOptionUseRecipe
	(*TaskOptionFinishTaskCount)(nil),     // 8: gameMessageCore.TaskOptionFinishTaskCount
	(*TaskOptionFinishTaskListCount)(nil), // 9: gameMessageCore.TaskOptionFinishTaskListCount
	(*TaskOptionTargetPosition)(nil),      // 10: gameMessageCore.TaskOptionTargetPosition
	(*TaskOptionCnf)(nil),                 // 11: gameMessageCore.TaskOptionCnf
	(*TaskOption)(nil),                    // 12: gameMessageCore.TaskOption
	(*Task)(nil),                          // 13: gameMessageCore.Task
	(*NormalTaskData)(nil),                // 14: gameMessageCore.NormalTaskData
	(*TaskList)(nil),                      // 15: gameMessageCore.TaskList
	(TalentType)(0),                       // 16: gameMessageCore.TalentType
}
var file_task_proto_depIdxs = []int32{
	1,  // 0: gameMessageCore.TaskOptionFinishTaskCount.kind:type_name -> gameMessageCore.TaskListType
	1,  // 1: gameMessageCore.TaskOptionFinishTaskListCount.kind:type_name -> gameMessageCore.TaskListType
	0,  // 2: gameMessageCore.TaskOptionCnf.kind:type_name -> gameMessageCore.TaskOptionType
	2,  // 3: gameMessageCore.TaskOptionCnf.handInItem:type_name -> gameMessageCore.TaskOptionItem
	2,  // 4: gameMessageCore.TaskOptionCnf.useItem:type_name -> gameMessageCore.TaskOptionItem
	2,  // 5: gameMessageCore.TaskOptionCnf.getItem:type_name -> gameMessageCore.TaskOptionItem
	3,  // 6: gameMessageCore.TaskOptionCnf.killMonster:type_name -> gameMessageCore.TaskOptionKillMonster
	4,  // 7: gameMessageCore.TaskOptionCnf.targetSlotLevel:type_name -> gameMessageCore.TaskOptionTargetSlotLevel
	5,  // 8: gameMessageCore.TaskOptionCnf.slotLevelCount:type_name -> gameMessageCore.TaskOptionSlotLevelCount
	6,  // 9: gameMessageCore.TaskOptionCnf.craftSkillLevel:type_name -> gameMessageCore.TaskOptionCraftSkillLevel
	7,  // 10: gameMessageCore.TaskOptionCnf.useRecipe:type_name -> gameMessageCore.TaskOptionUseRecipe
	8,  // 11: gameMessageCore.TaskOptionCnf.FinishTaskCount:type_name -> gameMessageCore.TaskOptionFinishTaskCount
	9,  // 12: gameMessageCore.TaskOptionCnf.FinishTaskListCount:type_name -> gameMessageCore.TaskOptionFinishTaskListCount
	10, // 13: gameMessageCore.TaskOptionCnf.TargetPosition:type_name -> gameMessageCore.TaskOptionTargetPosition
	11, // 14: gameMessageCore.TaskOption.optionCnf:type_name -> gameMessageCore.TaskOptionCnf
	16, // 15: gameMessageCore.Task.talentKind:type_name -> gameMessageCore.TalentType
	0,  // 16: gameMessageCore.Task.taskKind:type_name -> gameMessageCore.TaskOptionType
	12, // 17: gameMessageCore.Task.options:type_name -> gameMessageCore.TaskOption
	13, // 18: gameMessageCore.NormalTaskData.curTasks:type_name -> gameMessageCore.Task
	1,  // 19: gameMessageCore.TaskList.kind:type_name -> gameMessageCore.TaskListType
	16, // 20: gameMessageCore.TaskList.talentKind:type_name -> gameMessageCore.TalentType
	13, // 21: gameMessageCore.TaskList.cur_task:type_name -> gameMessageCore.Task
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_task_proto_init() }
func file_task_proto_init() {
	if File_task_proto != nil {
		return
	}
	file_talent_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_task_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskOptionItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskOptionKillMonster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskOptionTargetSlotLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskOptionSlotLevelCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskOptionCraftSkillLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskOptionUseRecipe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskOptionFinishTaskCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskOptionFinishTaskListCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskOptionTargetPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskOptionCnf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NormalTaskData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_task_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*TaskOptionCnf_UserLevel)(nil),
		(*TaskOptionCnf_HandInItem)(nil),
		(*TaskOptionCnf_UseItem)(nil),
		(*TaskOptionCnf_GetItem)(nil),
		(*TaskOptionCnf_KillMonster)(nil),
		(*TaskOptionCnf_TargetSlotLevel)(nil),
		(*TaskOptionCnf_SlotLevelCount)(nil),
		(*TaskOptionCnf_CraftSkillLevel)(nil),
		(*TaskOptionCnf_UseRecipe)(nil),
		(*TaskOptionCnf_RecipeUseCount)(nil),
		(*TaskOptionCnf_FinishTaskCount)(nil),
		(*TaskOptionCnf_FinishTaskListCount)(nil),
		(*TaskOptionCnf_TargetPosition)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_task_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_task_proto_goTypes,
		DependencyIndexes: file_task_proto_depIdxs,
		EnumInfos:         file_task_proto_enumTypes,
		MessageInfos:      file_task_proto_msgTypes,
	}.Build()
	File_task_proto = out.File
	file_task_proto_rawDesc = nil
	file_task_proto_goTypes = nil
	file_task_proto_depIdxs = nil
}
