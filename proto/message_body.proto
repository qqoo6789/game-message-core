syntax = "proto3";
package gameMessageCore;
option go_package = "./messageGo/proto";
 
import "player.proto";
import "os.proto";
import "platform.proto";
import "item.proto";
import "entity.proto";
import "entityProfile.proto";
import "skill.proto";
import "task.proto";
import "chat.proto";
import "vector.proto";
import "land.proto";
import "service.proto";
import "home.proto";
import "talent.proto";
import "capture.proto";
import "login.proto";

 
// C->S MESSAGE TITLE
message ReqTitle{
  int32         seqId = 1;
}
// S->C MESSAGE TITLE
message RespTitle{
  int32         seqId         = 1;
  int32         errorCode     = 2;
  string        errorMessage  = 3;
}
 
//***************************************************************************

//保留id协议      : 0x00ZZZZ   ***********************************************      
message BroadCastTickOutResp{
  RespTitle     resTitle  = 1;
  TickOutType   kind      = 2;
}


//mainServer协议 : 0x01ZZZZ  主数据服务协议************************************
message ItemGetReq {
  ReqTitle      reqTitle  = 1; 
}
message ItemGetResp {
  RespTitle     resTitle  = 1;
}
message BroadCastInitItemResp{
  RespTitle     resTitle  = 1;
  repeated Item items     = 2;
}
message ItemUseReq { 
  ReqTitle      reqTitle  = 1;
  // 使用的道具 id
  string        itemId    = 2;
  // 使用消耗品的动态参数
  string        args      = 3;
}
message ItemUseResp {
  RespTitle     resTitle  = 1;
}
message ItemDropReq {
  ReqTitle      reqTitle  = 1;
  string        itemId    = 2;
  int32         num       = 3;
}
message ItemDropResp {
  RespTitle     resTitle  = 1;
}
// 穿装备
message UpdateAvatarReq {
  ReqTitle      reqTitle     = 1;
  string        itemId       = 2;
  bool          isAppearance = 3; // 是否使用为时装
}
message UpdateAvatarResp {
  RespTitle     resTitle  = 1;
}
// 卸下装备
message UnloadAvatarReq {
  ReqTitle      reqTitle  = 1;
  string        itemId    = 2;
}
message UnloadAvatarResp {
  RespTitle     resTitle  = 1;
}
message BroadCastItemAddResp {
  RespTitle     resTitle  = 1;
  repeated Item items     = 2;
}
message BroadCastItemUpdateResp {
  RespTitle     resTitle  = 1;
  repeated Item items     = 2;
}
message BroadCastItemDelResp{
  RespTitle     resTitle  = 1;
  repeated Item items     = 2;
}

message SigninPlayerReq {
  ReqTitle      reqTitle          = 1;
  string        token             = 2; // token校验信息
  int64         clientTime        = 3;
  bool          reconnect         = 4; 
  // 客户端期望链接的 sceneServiceAppId,仅在开发模式有效
  string        sceneServiceAppId = 5; 
}
message SigninPlayerResp {
  RespTitle     resTitle          = 1;
  Player        player            = 2; // 玩家信息
  int64         serverTime        = 3;
  int64         clientTime        = 4;
   string       sceneServiceAppId = 5;
}
message SignOutPlayerReq{
  ReqTitle      reqTitle          = 1; 
}
message SignOutPlayerResp{
  RespTitle     resTitle          = 1;
}

message BroadCastEntityProfileUpdateResp {
  RespTitle               resTitle  = 1;
  EntityId                entity_id = 2;
  repeated AttributeData  profiles  = 3;
}

message BroadCastMonsterDeathResp{
  RespTitle               resTitle    = 1;
  int32                   mapId       = 2;
  int64                   killerId    = 3;
  int64                   monsterId   = 4;
  int32                   cid         = 5; 
  Vector3                 pos         = 6;
  repeated ItemBaseInfo   dropList    = 7;
}

message BroadCastEntityBattleDataUpdateResp {
  RespTitle               resTitle    = 1; 
  EntityId                entityId    = 2;
  bool                    isInBattle  = 3;
  int64                   ownerId     = 4;
}

message BroadCastEntityCaptureDataUpdateResp{
  RespTitle               resTitle        = 1; 
  CaptureStatus           status          = 2;
  int64                   fromId          = 3;
  int64                   toId            = 4;
  CaptureData             captureDataFrom = 5;
  CaptureData             captureDataTo   = 6;
  CaptureFailReason       failReason      = 7;
}

message BroadCastEntityCaptureTrapSkillResp{
  RespTitle               resTitle        = 1;
  int64                   entityId        = 2;
  Vector3                 position        = 3;
  int64                   timedExplosionAt= 4; // 定时爆炸时间戳
  bool                    isStart        =5; // 开始或结束
}

// 占地相关
message QueryLandsReq{
  ReqTitle          reqTitle  = 1;
}
message QueryLandsResp{
  RespTitle         resTitle  = 1;
}
message BroadCastInitLandResp{
  RespTitle         resTitle  = 1;
  repeated LandData lands     = 2;
} 
message BuildReq{
  ReqTitle          reqTitle  = 1;
  string            nftId     = 2;
  Vector3           position  = 3;
  repeated int32    landIds   = 4; 
}
message BuildResp{
  RespTitle         resTitle  = 1;
  NftBuild          build     = 2;
}
message RecyclingReq{
  ReqTitle          reqTitle  = 1;
  int64             buildId   = 2; // == entity Id
  string            nftId     = 3;  
}
message RecyclingResp{
  RespTitle         resTitle  = 1;
}

message ChargedReq{
  ReqTitle          reqTitle  = 1;
  int64             buildId   = 2;
  string            nftId     = 3;
  int32             num       = 4; 
}
message ChargedResp{
  RespTitle         resTitle  = 1;
}
message HarvestReq{
  ReqTitle          reqTitle  = 1;
  int64             buildId   = 2;
  string            nftId     = 3;  
}
message HarvestResp{
  RespTitle         resTitle  = 1;
}
message CollectionReq{
  ReqTitle          reqTitle  = 1;
  int64             buildId   = 2;
  string            nftId     = 3;  
}
message CollectionResp{
  RespTitle         resTitle  = 1;
}

message BroadCastMultiUpLandResp{
  RespTitle         resTitle  = 1;
  repeated LandData lands     = 2;
}

message SelfNftBuildsReq{ 
  ReqTitle          reqTitle  = 1;
}
message SelfNftBuildsResp{
  RespTitle         resTitle  = 1;
  repeated NftBuild builds    = 2;
}
message BroadCastSelfBuildUpdateResp{
  RespTitle         resTitle  = 1;
  NftBuild          build     = 2;
}
message BroadCastSelfBuildRecyclingResp{
  RespTitle         resTitle  = 1;
  int64             buildId   = 2; 
  string            fromNft   = 3;
  int64             owner     = 4;   
}

message MintBatteryReq{ 
  ReqTitle          reqTitle  = 1;
  // mint 数量
  int32             mintNum   = 2;
  // 赠送数量, 由前端传过来, 防止后端配表跟前端不一致时, 出现问题
  int32             giftNum   = 3;
}
message MintBatteryResp{
  RespTitle         resTitle  = 1;
}

message ExitCaptureReq{ 
  ReqTitle          reqTitle        = 1;
  CaptureFailReason failReason      = 2;
}
message ExitCaptureResp{ 
  RespTitle         resTitle        = 1;
}
message EntityAccumulateStatusReq{
  ReqTitle          reqTitle        = 1; 
  int32             skillId         = 2; // 技能id
  bool              isStart         = 3; // 蓄力开始 or 结束
  float             accumulateTime  = 4; // 蓄力时间
}
message EntityAccumulateStatusResp{ 
  RespTitle         resTitle        = 1;
}
message BroadCastEntityAccumulateStatusResp{ 
  RespTitle         resTitle        = 1;
  int32             skillId         = 2; // 技能id
  bool              isStart         = 3; // 蓄力开始 or 结束
  float             accumulateTime  = 4; // 蓄力时间
  int64             entityId        = 5; // 蓄力实体
}

message QueryGranaryReq{
  ReqTitle              reqTitle  = 1;
}
message QueryGranaryResp{
  RespTitle             resTitle  = 1;
  repeated ItemBaseInfo items     = 2;
}
message GranaryCollectReq{
  ReqTitle              reqTitle  = 1;
}
message GranaryCollectResp{
  RespTitle             resTitle  = 1;
  repeated ItemBaseInfo items     = 2;
}
message BroadCastGranaryUpdateResp{
  RespTitle             resTitle  = 1;
  repeated ItemBaseInfo items     = 2;
}
message BroadCastUpGranaryItemResp{
  RespTitle             resTitle  = 1;
  ItemBaseInfo          items     = 2;
}
 
// 天赋树相关
message UpgradeTalentNodeReq{
  ReqTitle        reqTitle  = 1;
  TalentType      type      = 2;
  int32           nodeId    = 3;
}  
message UpgradeTalentNodeResp{
  RespTitle       resTitle  = 1;
} 
message QueryTalentExpReq{
  ReqTitle            reqTitle  = 1;
}        
message QueryTalentExpResp{
  RespTitle           resTitle  = 1;
  repeated TalentExp  expData   = 2;
} 
message BroadCastUpTalentExpResp{
  RespTitle           resTitle    = 1;
  repeated TalentExp  updateExps  = 2;
} 

// 家园动物相关
message QueryAnimalListReq{
  ReqTitle                        reqTitle  = 1;
}
message QueryAnimalListResp{
  RespTitle                       resTitle  = 1;
  repeated   ProxyAnimalBaseData  animals   = 2;
}
message BroadCastUpdateAnimalListResp{
  RespTitle                       resTitle      = 1;
  repeated   ProxyAnimalBaseData  addAnimals    = 2;
  repeated   ProxyAnimalBaseData  updateAnimals = 3;
  repeated   uint64               removeAnimals = 4;
}
message FreedAnimalReq{
  ReqTitle            reqTitle = 1;
  repeated   uint64   animalId = 2;
}
message FreedAnimalResp{
  RespTitle           resTitle = 1;
  repeated   uint64   animalId = 2;
}

message EntityDialogueReq{
  ReqTitle        reqTitle  = 1;
  DialogueEvent   event     = 2;
  int64           entityId  = 3;
}
message EntityDialogueResp{
  RespTitle       resTitle  = 1;
}

message BroadCastEntityEquipmentSkillResp{ 
  RespTitle       resTitle        = 1;
  int64           entityId        = 2;    // 实体ID
  repeated int32  equipmentSkills = 3;    // 装备技能列表
}



//accountSer协议 : 0x02ZZZZ  账号服务 协议 ************************************
message QueryPlayerReq {
  ReqTitle        reqTitle  = 1;
  string          token     = 2; 
}
message QueryPlayerResp {
  RespTitle       resTitle  = 1;
  PlayerBaseData  player    = 2; // 玩家信息
}

message CreatePlayerReq {
  ReqTitle        reqTitle  = 1;
  string          token     = 2;
  string          nickName  = 3;  // 名字
  int32           roleId    = 4;  // 配置 ID
  string          gender    = 5;  // 玩家性别，男生为 male, 女生为 female
  string          icon      = 6;  //角色头像
  PlayerFeature   feature   = 7;  // 容貌数据
  OSType          osType    = 8;  // 渠道(android/ios)
  PlatformType    platform  = 9;  // 平台(taptap...)
}
message CreatePlayerResp {
  RespTitle       resTitle  = 1;
  PlayerBaseData  player    = 2; // 玩家信息
}

message LoginReq {
  ReqTitle      reqTitle          = 1;
  string        token             = 2;    // token校验信息 
  OSType        osType            = 3;    // 渠道(android/ios)
  PlatformType  platform          = 4;    // 平台(taptap...) 
}
message LoginResp {
  RespTitle     resTitle          = 1; 
  int64         lastLoginTime     = 2;    //上次登录的时间
  int32         queue             = 3;    //排队位置
}
message BroadCastQueueResp{
  RespTitle     resTitle          = 1; 
  LoginState    loginState        = 2;
  int32         queue             = 3;    //排队位置
}


//screenSer 协议 : 0x03ZZZZ  战斗服务 协议 ************************************
message EnterMapReq {
  ReqTitle        reqTitle    = 1;
}
message EnterMapResp {
  RespTitle       resTitle    = 1;
  Player          me          = 2; // 当前玩家信息  
  EntityLocation  location    = 3; // 当前玩家位置
  int32           reliveTime  = 4;
}
message UpdateSelfLocationReq{
  ReqTitle        reqTitle    = 1;
  EntityMovement  movement    = 2;
}
message UpdateSelfLocationResp {
  RespTitle       resTitle    = 1;
  EntityMovement  movement    = 2;
  float           speed       = 3;
}

message UseSkillReq{
  ReqTitle          reqTitle      = 1;
  // 使用的技能 id
  int32             skillId       = 2;
  // 技能使用方向，相对于玩家当前位置.
  EntityLocation    dir           = 3;
  // 技能使用的位置  指定后，会将玩家重置到该位置.
  EntityLocation    fromLocation  = 4;
  // 技能指定使用的目标
  EntityId          targetId      = 5;
  // 技能指定目标位置
  EntityLocation    targetPos     = 6;
  // 使用技能状态
  UseSkillState     skillState    = 7;
  //家园采集信息
  UseCollectResourceSkillInfo homeCollectInfo = 8;
  // 蓄力技能蓄力时间 s
  float             accuTime      = 9; 
  // 技能消耗道具
  UseSkillCostItem  costItem      = 10;
}
message UseSkillResp {
  RespTitle         resTitle      = 1;
  int32             randomSeed       = 2; 
} 
message RespawnPlayerReq {
  ReqTitle            reqTitle      = 1;
  PlayerRespawnPoint  respawnPoint  = 2;
}
message RespawnPlayerResp {
  RespTitle           resTitle      = 1;
  int64               userId        = 2;
  int32               curHp         = 3;
  bool                active        = 4;
  EntityLocation      location      = 5;
}
message BroadCastRespawnPlayerResp {
  RespTitle           resTitle      = 1;
  int64               userId        = 2;
  int32               curHp         = 3;
  bool                active        = 4;
  EntityLocation      location      = 5;
  int64               reviveCd      = 6;
}

message PlayerActionCollectReq {
  ReqTitle      reqTitle  = 1;
}
message PlayerActionCollectResp {
  RespTitle     resTitle  = 1;
}
message BroadCastPlayerActionCollectResp {
  RespTitle     resTitle  = 1;
  int64         userId    = 2;
}

message PlayerActionChatReq {
  ReqTitle      reqTitle  = 1;
  bool          show      = 2;
}
message PlayerActionChatResp {
  RespTitle     resTitle  = 1;
}
message BroadCastPlayerActionChatResp {
  RespTitle     resTitle  = 1;
  int64         userId    = 2;
  bool          show      = 3;
}
message GetHomeDataReq {
  ReqTitle      reqTitle      = 1;
  int64         reqDataUserId = 2;
}
message GetHomeDataResp{
  RespTitle     resTitle              = 1;
  int64         ownerUserId           = 2;
  string        ownerName             = 3;
  int32         soilDataAllCount      = 4;
  string        animalBowlArr         = 5;
  int32         UsedSoilFertileValue  = 6;
  int32         UsedAnimalHappyValue  = 7;
}
message BroadCastHomeDataInitBatchResp{
  RespTitle               resTitle                = 1;
  repeated ProxySoilData  soilDataList            = 2;
  //有进度的才会有
  repeated HomeSoilProgressInfo soilProgressList  = 3;
  int64                   ownerUserId             = 4;
  bool                    final                   = 5;
}

//释放家园技能结果
message BroadCastHomeSkillResultResp{
  RespTitle     resTitle      = 1;
  //释放技能的用户id
  int64         actionUserId  = 2;
  int32         skillId       = 3;
  //消耗道具的cid 比如种子 肥料
  int32         costItemCid   = 4;
  //每个家园对象的操作结果
  repeated CollectResourceOperateResult operateResultList = 5;
}

message BroadCastAnimalSceneDataUpdateResp{
  RespTitle             resTitle              = 1;
  AnimalUpdateData      animalUpdateData      = 2;
  AnimalBowlUpdateData  animalBowlUpdateData  = 3;
}
message BroadCastAnimalDeathResp{
  RespTitle             resTitle    = 1;
  uint64                animalId    = 2;
}
message BroadCastAnimalAutoProduceResp{
  RespTitle             resTitle    = 1;  
  uint64                animalId    = 2;
  ProxyProductData      productData = 3;
}
message BroadCastPickupDropResp{
  RespTitle             resTitle      = 1;
  int64                 pickPlayerId  = 2;
  int64                 dropId        = 3;
  DropType              dropType      = 4;
  repeated ItemBaseInfo dropList      = 5;

  oneof extraInfo {
    uint64              animalId      = 10;
 }
}

message BroadCastInitMapElementResp {
  RespTitle                   resTitle  = 1;
  // 视野内新增的实体列表
  repeated EntityWithLocation entity    = 2;  
  repeated DestructionElementData destructionElements = 3; // 视野内当前场景中被破坏的元素列表
  bool                        final     = 4; // 是否最后一个包
} 
message BroadCastMapEntityUpdateResp{
  RespTitle                   resTitle      = 1;
  // 视野内新增的实体列表
  repeated EntityWithLocation entityAdded   = 2;
  // 视野内移除的实体列表
  repeated EntityId           entityRemoved = 3;
  // 视野内当前场景中被破坏的元素列表
  repeated DestructionElementData destructionElements = 4;
}
message BroadCastEntityMoveResp{
  RespTitle                   resTitle      = 1;
  repeated EntityMovement     moves         = 2;
}
message BroadCastEntityMoveSpeedResp{
  RespTitle             resTitle      = 1;
  float                 speed         = 2;
}
message BroadCastEntityDestroyResp{
  RespTitle             resTitle      = 1;
    // 销毁的 实体列表
  repeated EntityId     entities      = 2;
}
message BroadCastEntityCombatResp{
  RespTitle             resTitle      = 1;
  // 技能释放阶段
  EntityCombatState     state         = 2;
  // 使用的技能 id
  int32                 skillId       = 3;
  // 连击动作
  int32                 comboIndex    = 4;
  // 使用技能的对象 id
  EntityId              fromEntity    = 5;
  // 使用技能的目标
  repeated int64        targetList    = 6;
  // 技能使用方向，相对于释放玩家当前位置.
  EntityLocation        dir           = 7;
  // 技能释放的位置
  EntityLocation        fromLocation  = 8;
  // 技能目标为
  EntityLocation        targetLocation  = 9;
  // 当前消息状态的服务器时间
  int64                 curStamp      = 10;
  // 接收技能伤害的对象 id 数组
  repeated EntityDamage targets       = 11;
  // 产生的所有技能飞行物
  repeated SkillFlyerData flyers      = 12;
  // 技能使用道具
  UseSkillCostItem      costItem      = 13;
}

message TeleportReq {
  ReqTitle      reqTitle  = 1;
  Vector3       toPos     = 2;
}
message TeleportResp {
  RespTitle     resTitle  = 1;
}

message BroadCastEntityAvatarUpdateResp {
  RespTitle                 resTitle  = 1;
  // 变化的entity id
  EntityId                  entityId  = 2;
  // 变化后的 avatar 装备列表
  repeated AvatarAttribute  avatars   = 3;
}

message BroadCastEntityBuildDataUpdateResp {
  RespTitle       resTitle          = 1;
  // 变化的entity id
  EntityId        entityId          = 2; 
  // 电量过期时间 单位秒
  int32           electricEnd       = 3;	
  // 产出开始时间点.
  int32           harvestStartAt    = 4;
  // 可以收集的时间
  int32           harvestAt         = 5;
  // 可收获的物品数量统计(没电时转移到采集) 单位秒
  int32           harvestItemCount  = 6;
  // 采集开始时间点
  int32           collectionStartAt = 7;
  // 下次可采集(偷取)的时间戳 单位秒
  int32           collectionAt      = 8;
  // 可采集(偷取)物品数量统计
  int32           collectionItemCount = 9;
}

message SceneDestructionReq{
  ReqTitle        reqTitle  = 1;
  repeated int64  ids       = 2;
}
message SceneDestructionResp{
  RespTitle       resTitle  = 1;
}
message BroadCastSceneDestructionResp{
  RespTitle                       resTitle            = 1;
  repeated DestructionElementData destructionElements = 2;
}

message QueryServerTimeReq {
  ReqTitle    reqTitle    = 1;
  int64       clientTime  = 2;
}
message QueryServerTimeResp {
  RespTitle   resTitle    = 1;
  int64       clientTime  = 2;
  int64       systemTime  = 3;
}

message BroadCastChangeServiceResp{
  RespTitle           resTitle   = 1;
  ServiceType         serType    = 2;
  SceneServiceSubType serSubType = 3;
  int64               serOwner   = 4;  
}

message QueryTalentTreeReq{
  ReqTitle                  reqTitle  = 1;
}        
message QueryTalentTreeResp{
  RespTitle                 resTitle  = 1;
  repeated TalentLevel      levelData = 2;
  repeated TalentTree       tree      = 3;
}      
message BroadCastTalentTreeUpdateResp{
  RespTitle                 resTitle  = 1;
  repeated TalentLevel      levelData = 2;
  repeated TalentTreeUpdate upTrees   = 3;
}      

message AnimalSpecialActionReq{
  ReqTitle                reqTitle    = 1;
  uint64                  animalId    = 2;
  AnimalSpecialActionType actionType  = 3;
}
message AnimalSpecialActionResp{
  RespTitle               resTitle    = 1;
  uint64                  animalId    = 2;
  AnimalSpecialActionType actionType  = 3;
}

// 抓捕Animal(同步可能释放一个 Animal) to scene service
message CaptureAnimalReq{
  ReqTitle                      reqTitle       = 1;
  repeated uint64               freedAnimalIds = 2; 
  repeated ProxyAnimalBaseData  captrueAnimals = 3;
}        
message CaptureAnimalResp{
  RespTitle                     resTitle       = 1;
}  



//taskServer协议 : 0x04ZZZZ  任务服务 协议 ************************************

message SelfTasksReq {
  ReqTitle      reqTitle  = 1;
}
message SelfTasksResp {
  RespTitle           resTitle    = 1;
  NormalTaskData      normalTasks = 2;
  repeated  TaskList  taskLists   = 3; 
}
// 广播更新玩家普通任务 
message BroadCastUpdateTaskResp {
  RespTitle           resTitle    = 1;
  NormalTaskData      normalTasks = 2;
}
// 玩家任务链更新
message BroadCastUpdateTaskListResp {
  RespTitle           resTitle      = 1;
  TaskListType        taskListKind  = 2;
  TaskList            taskListInfo  = 3;
}

// 领取任务
message  AcceptTaskReq{
  ReqTitle          reqTitle  = 1;
  int32             taskId    = 2;
}
message  AcceptTaskResp{
  RespTitle          resTitle     = 1;
  NormalTaskData     normalTasks  = 2;
}

// 领取任务链任务
message  AcceptTaskListReq{
  ReqTitle          reqTitle      = 1;
  TaskListType      taskListKind  = 2;
  TalentType        talentKind    = 3;
}
message  AcceptTaskListResp{
  RespTitle         resTitle     = 1;
  TaskList          taskListInfo = 2;
}

// 放弃任务(任务有保护时间)
message  AbandonTaskReq{
  ReqTitle          reqTitle  = 1;
  int32             taskId    = 2;
}
message  AbandonTaskResp{
  RespTitle         resTitle    = 1;
  NormalTaskData    normalTasks = 2;
}

// 放弃任务链的任务(任务有保护时间)
message  AbandonTaskListReq{
  ReqTitle          reqTitle     = 1;
  TaskListType      taskListKind = 2; 
}
message  AbandonTaskListResp{
  RespTitle         resTitle     = 1;
  TaskListType      taskListKind = 2; 
}

// 获取任务奖励
message  TaskRewardReq{
  ReqTitle          reqTitle      = 1;
  // 任务链类型, 当TaskListType == Unknown 时表示领取玩家normal任务的奖励
  TaskListType      taskListKind  = 2;
  int32             taskId        = 3;
}
message  TaskRewardResp{
  RespTitle         resTitle      = 1;
  TaskListType      taskListKind  = 2;
  int32             taskId        = 3;
  TaskList          taskListInfo  = 4;
  NormalTaskData    normalTasks   = 5;
}
 
message  UpgradeTaskProgressReq{
  ReqTitle                  reqTitle      = 1;
  // 任务链类型, 当TaskListType == Unknown 时表示领取玩家normal任务的奖励
  TaskListType              taskListKind  = 2;
  int32                     taskId        = 3;
  // item NFT ids : 上交若干数量的指定道具
  repeated TaskOptionItem   items         = 4;
  // 到达指定坐标点指定半径范围内的区域
  TaskOptionTargetPosition  pos           = 5;
  // 使用指定的配方合成
  TaskOptionUseRecipe       useRecipe     = 6; 
}
message  UpgradeTaskProgressResp{
  RespTitle                 resTitle      = 1;
}
// 推送获取的任务奖励
message BroadCastTaskRewardResp{
  RespTitle                 resTitle      = 1;
  TaskListType              taskListKind  = 2;
  int32                     taskId        = 3;
  repeated  TalentExp       talentExps    = 4;
  repeated  ItemBaseInfo    items         = 5;
}
// 推送获取的任务链奖励
message BroadCastTaskListRewardResp{
  RespTitle                 resTitle      = 1;
  TaskListType              taskListKind  = 2;  
  repeated  TalentExp       talentExps    = 3;
  repeated  ItemBaseInfo    items         = 4;
}


//chatServer协议 : 0x05ZZZZ  聊天服务 协议 ************************************
message SendChatMessageReq {
  ReqTitle        reqTitle        = 1;
  ChatChannelType chatType        = 2;
  string          content         = 3;
  // 发送到*世界/分线/附近/副本*这些公共频道的时候不需要带`receiver_id`
  // 只有*私聊*需要带`receiver_id`
  int64           receiverPlayerId = 4;
}
message SendChatMessageResp {
  RespTitle       resTitle        = 1;
  int64           msgId           = 2;
}
// 玩家接收到的聊天信息
message BroadCastChatMessagesResp {
  RespTitle             resTitle          = 1;
  repeated ChatMessage  messages          = 2;
  bool                  historicalRecord  = 3;
}
message BroadCastRemoveChatMessageResp{
  RespTitle             resTitle  = 1;
  repeated int64        msgIds    = 2;
}
message BroadCastUpdateChatStateResp{
  RespTitle             resTitle  = 1;
  ChatState             chatState = 2;
}



//getaway   协议 : 0x06ZZZZ  网关服务 协议 ************************************
message PingReq {
  ReqTitle      reqTitle  = 1;
}
message PingResp {
  RespTitle     resTitle  = 1;
} 



//ServiceMgr协议 : 0x09ZZZZ  服务管理 协议(客户端不能调用) **********************


//CTRlServer协议 : 0x0aZZZZ  控制服务 协议 ************************************ 

