syntax = "proto3";
package gameMessageCore;
option go_package = "./messageGo/proto";

import "talent.proto";

 

enum TaskOptionType{
  UnknownTaskOptionType = 0;
  // 上交若干数量的指定道具(寻物任务)
  HandInItem = 1;
  // 使用若干数量的指定道具
  UseItem = 2;
  // 获得若干数量的指定道具
  GetItem = 3;
  // 杀死若干数量的指定怪物
  KillMonster = 4; 
  //角色达到某等级
  UserLevel = 5;
  //指定插槽达到某等级
  TargetSlotLevel = 6;
  //指定数量插槽都达到某等级
  SlotLevelCount = 7;
  //指定合成技能达到某等级
  CraftSkillLevel = 8;
  //使用指定的配方合成
  UseRecipe = 9; 
  //累计合成多少次
  RecipeUseCount = 10;
  //完成若干指定任务链的任务
  TaskCount = 11;
  //完成若干次的指定类型任务链
  TaskListTypeCount = 12;
  //到达指定坐标点指定半径范围内的区域
  TargetPosition = 13;
}


message TaskOptionItem {
  int32           itemCid = 1;
  int32           num = 2; // max 10
  string          nftId = 3;
}
message TaskOptionKillMonster {
  int32           monCid = 1;
  int32           num = 2;
}
message TaskOptionTargetSlotLevel{
  int32           slotPos = 1;
  int32           level   = 2;
}
message TaskOptionSlotLevelCount{
  int32           slotLevel = 1;
  int32           slotCount = 2;
}
message TaskOptionCraftSkillLevel{
  int32           skillId = 1;
  int32           level   = 2;
}
message TaskOptionUseRecipe{
  int32           recipeId = 1;
  int32           times = 2;
}
message TaskOptionFinishTaskCount{
  TaskListType    kind  = 1;
  int32           count = 2;
}
message TaskOptionFinishTaskListCount{
  TaskListType    kind  = 1;
  int32           count = 2;
}
message TaskOptionTargetPosition{
  int32           x          = 1;
  int32           y          = 2;
  int32           z          = 3;
  int32           distOffset = 4;
}

message TaskOptionCnf {
  TaskOptionType kind = 1;

  oneof data{
    // 角色达到某等级
    int32                             userLevel = 11;
    // 上交若干数量的指定道具(寻物任务)
    TaskOptionItem                    handInItem = 12;
    // 使用若干数量的指定道具  
    TaskOptionItem                    useItem = 13;
    // 获得若干数量的指定道具     
    TaskOptionItem                    getItem = 14;
    // 杀死若干数量的指定怪物     
    TaskOptionKillMonster             killMonster = 15;
    // 指定插槽达到某等级 
    TaskOptionTargetSlotLevel         targetSlotLevel = 16;
    // 指定数量插槽都达到某等级
    TaskOptionSlotLevelCount          slotLevelCount = 17;
    // 指定合成技能达到某等级
    TaskOptionCraftSkillLevel         craftSkillLevel = 18;
    // 使用指定的配方合成
    TaskOptionUseRecipe               useRecipe = 19;
    // 累计合成多少次
    int32                             RecipeUseCount = 20;
    // 完成若干指定任务链的任务
    TaskOptionFinishTaskCount         FinishTaskCount = 21;
    // 完成若干次的指定类型任务链
    TaskOptionFinishTaskListCount     FinishTaskListCount = 22;
    // 到达指定坐标点指定半径范围内的区域
    TaskOptionTargetPosition          TargetPosition = 23;
  }
}

message TaskOption {
  // 配置
  TaskOptionCnf optionCnf = 1;
  // 进度
  int32         rate = 2;
}

// 任务
message Task {
  // 任务 ID
  int32           taskId = 1;
  // 专精类型
  TalentType      talentKind = 2; 
  // 任务类型
  TaskOptionType  taskKind = 3;
  // 任务的接取时间
  int64           createdSec = 4;
  // 子项信息
  repeated  TaskOption  options = 5;
}

// 用户已接任务
message NormalTaskData {
  repeated  int32  finishTasks = 1;
  repeated  Task   curTasks    = 2;
}

enum TaskListType {
  TaskListTypeUnknown = 0;
  // 每日任务
  Daily = 1;
  // 悬赏任务
  Rewarded = 2; 
}

message TaskList{
  // task list id
  int32         id = 1;
  // task list type
  TaskListType  kind = 2;
  // 专精类型
  TalentType    talentKind = 3; 
  // 任务链是否可以在接取
  bool          canReceive = 4;
  // 任务链是否正在进行
  bool          doing  = 5;
  // 进度
  int32         rate = 6;
  // current task
  Task          cur_task = 7;
  // 任务奖励的领取进度(0, 1, 2)
  int32         receiveReward = 8;
}

